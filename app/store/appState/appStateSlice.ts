import { createSlice } from "@reduxjs/toolkit";
import type { PayloadAction } from "@reduxjs/toolkit";

interface AppState {
  loading: boolean;
  message: string;
  level: number;
}

const initialState: AppState = {
  loading: false,
  message: "",
  level: 1,
};

export const appStateSlice = createSlice({
  name: "appState", // identifies slice
  initialState: initialState, //initial state value
  //reducer functions to define how the state is updated
  reducers: {
    LOADING_START: (state) => {
      state.loading = true;
    },
    LOADING_DONE: (state) => {
      state.loading = false;
    },
    SET_MESSAGE: (state, action: PayloadAction<string>) => {
      state.message = action.payload;
    },
    CLEAR_MESSAGE: (state) => {
      state.message = "";
    },
    INCREASE_LEVEL: (state) => {
      state.level += 1;
    },
  },
});

//export autogenerated redux action creators and the reducer function for the whole slice
export const { LOADING_START, LOADING_DONE, SET_MESSAGE, CLEAR_MESSAGE } =
  appStateSlice.actions;

/*We can read data from the store with useSelector, and dispatch actions using useDispatch.
e.g.   const count = useSelector((state: RootState) => state.counter.value)
 const dispatch = useDispatch()
<button
          onClick={() => dispatch(increment())}
        >*/
export default appStateSlice.reducer;
